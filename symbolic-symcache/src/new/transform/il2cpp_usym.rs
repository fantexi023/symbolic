//! Resolves IL2CPP-compiled native symbols into their managed equivalents using an intermediate
//! mapping file generated by IL2CPP (usym) before writing them to a SymCache.
use symbolic_il2cpp::usym::{UsymSourceRecord, UsymSymbols};

use super::{Function, SourceLocation, Transformer};

impl Transformer for UsymSymbols<'_> {
    fn transform_function<'f>(&'f self, f: Function<'f>) -> Function<'f> {
        if let Some(UsymSourceRecord::Mapped(record)) = self.lookup_by_address(f.entry_pc) {
            Function {
                name: record.managed_symbol,
                comp_dir: None,
                ..f
            }
        } else {
            f
        }
    }

    fn transform_source_location<'f>(&'f self, mut sl: SourceLocation<'f>) -> SourceLocation<'f> {
        if let Some(UsymSourceRecord::Mapped(record)) = self.lookup_by_address(sl.address) {
            sl.file.name = String::from_utf8_lossy(record.managed_file_info.name);
            sl.file.directory = Some(String::from_utf8_lossy(record.managed_file_info.dir));
            sl.file.comp_dir = None;
            sl.line = record.managed_line;
        }
        sl
    }
}
